#!/usr/bin/python
#
# Borg (and external SSD) backup script.
#
# TODO:
# * sort "ls" output (in Python)
# * hold ssh key in memory and pass on cmd line
# * create a daemon to hold passwords

import argparse
import datetime
import getpass
import os
import subprocess
import sys

_BACKUP_DIR = "/home/user/files"


def borg():
    if "BORG_REPO" in os.environ:
        repo = os.environ["BORG_REPO"]
    else:
        repo = input("Please enter your borg repo location: ")
    borg_pass = getpass.getpass("Please enter your borg passphrase: ")
    env = os.environ.copy()
    env["BORG_PASSPHRASE"] = borg_pass
    return repo, env


def handle_proc(result):
    if result.returncode != 0:
        print(
            f"ERROR: Exit code {result.returncode} for '{' '.join(result.args)}'."
        )
        sys.exit()


def get_remote_stats(repo, env):
    print("Connecting...")
    cp = subprocess.run(
        [
            "borg",
            "list",
            "--format={archive},",  # use comma as delim
            f"{repo}",
        ],
        capture_output=True,
        text=True,
        env=env,
    )
    handle_proc(cp)
    versions = cp.stdout.strip(",").split(",")
    last_version = versions[-1]
    print(
        f"Found a total of {len(versions)} archives, with the last being \"{last_version}\"."
    )
    return last_version


def get_remote_stats_for_version(repo, last_version, env):
    print("Checking archive info...")
    cp = subprocess.run(
        [
            "borg",
            "info",
            f"{repo}::{last_version}",
        ],
        capture_output=True,
        text=True,
        env=env,
    )
    handle_proc(cp)
    num_files = cp.stdout.partition("Number of files: ")[2].partition("\n")[0]
    print(f"Number of files: {num_files}")
    archive_size = cp.stdout.partition("This archive:")[2].partition(
        "\n")[0].strip().partition("  ")[0]
    print(f"Uncompressed archive size: {archive_size}")
    total_size = cp.stdout.partition("All archives:")[2].partition(
        "\n")[0].rpartition("  ")[2].strip()
    print(f"All archives compressed size: {total_size}")


def backup(args):
    repo, env = borg()

    new_version = datetime.date.today().strftime("%Y_%m_%d")
    print("Performing backup...")
    cp = subprocess.run(
        [
            "borg", "create", "--progress", "--stats",
            f"{repo}::{new_version}", _BACKUP_DIR
        ],
        env=env,
    )
    handle_proc(cp)


def stats(args):
    repo, env = borg()
    last_version = get_remote_stats(repo, env)
    get_remote_stats_for_version(repo, last_version, env)


def ls(args):
    repo, env = borg()
    last_version = get_remote_stats(repo, env)

    path = ""
    if not args.dir or args.dir == ".":
        path = os.getcwd()
    elif args.dir.startswith("/"):
        path = args.dir
    else:
        path = os.path.join(os.getcwd(), args.dir)

    print(f"Remote files at {path}:")
    cp = subprocess.run(
        [
            "borg",
            "list",
            "--short",
            f"{repo}::{last_version}",
            path,
        ],
        env=env,
    )
    handle_proc(cp)


def cp(args):
    repo, env = borg()
    last_version = get_remote_stats(repo, env)

    num_dirs = args.path.strip("/").count("/")

    cp = subprocess.run(
        [
            "borg", "extract", "--progress", "--strip-components",
            str(num_dirs), f"{repo}::{last_version}", args.path
        ],
        env=env,
    )
    handle_proc(cp)


parser = argparse.ArgumentParser(
    prog="remote_backup",
    description="Back up files to borg.",
)
subparsers = parser.add_subparsers(required=True)

parser_stats = subparsers.add_parser("stats")
parser_stats.set_defaults(func=stats)

parser_stats = subparsers.add_parser("backup")
parser_stats.set_defaults(func=backup)

parser_ls = subparsers.add_parser("ls")
parser_ls.set_defaults(func=ls)
parser_ls.add_argument("dir", nargs='?')

parser_cp = subparsers.add_parser("cp")
parser_cp.set_defaults(func=cp)
parser_cp.add_argument("path")

args = parser.parse_args()
args.func(args)
