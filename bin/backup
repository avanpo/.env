#!/usr/bin/env bash
#
# Backup directories contained within $HOME to some other directory, given
# as the first argument.
#

# Exit if no root backup directory given.
if [ -z $1 ] || [ ! -d "$1" ]; then
	echo "No root backup directory given, or directory does not exist."
	exit 0
fi

backup_root=$1

# Exit if there is nothing to do.
if [ -z "$BACKUP_DIRS" ]; then
	echo "No directories to backup. Please set \$BACKUP_DIRS with space separated directories."
	exit 0
fi

RED="\033[31m"
GRN="\033[32m"
RST="\033[m"

for dir in $BACKUP_DIRS; do
	src="$HOME/$dir/"
	dest="$backup_root/$dir"

	# Check to see if directories exist.
	if [ ! -d "$src" ] || [ -z "$(ls -A "$src")" ]; then
		echo "Source dir $src not found or was empty." 1>&2
		exit 1
	fi

	# Back up files.
	echo "Backing up files in $src."
	rsync -au --info=progress2 --info=name0 "$src" "$dest"
	
	# Check for skipped files (newer on dest).
	skipped="$(rsync -na --out-format='%n%L' "$src" "$dest")"
	if [ $(echo -n "$skipped" | grep -c '^') -ne 0 ]; then
		echo -e "=> ${RED}WARNING${RST}: The following files are newer on the destination and have been skipped."
		echo "$skipped" | awk '{print "'"$dest"'/"$0}'
	fi

	# Check for files that exist on dest, but not on src.
	deleted="$(rsync -nau --delete --out-format='%n%L' "$src" "$dest")"
	if [ $(echo -n "$deleted" | grep -c '^') -ne  0 ]; then
		echo -e "=> ${RED}WARNING${RST}: The following files exist in the destination but have been deleted in the source."
		echo "$deleted" | awk '{print "'"$dest"'/"$2}'
	fi
done
